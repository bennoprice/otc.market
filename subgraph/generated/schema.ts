// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Offer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Offer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Offer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Offer", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Offer | null {
    return changetype<Offer | null>(store.get("Offer", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get state(): string {
    let value = this.get("state");
    return value!.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get taker(): Bytes | null {
    let value = this.get("taker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set taker(value: Bytes | null) {
    if (!value) {
      this.unset("taker");
    } else {
      this.set("taker", Value.fromBytes(<Bytes>value));
    }
  }

  get createdTimeStamp(): BigInt {
    let value = this.get("createdTimeStamp");
    return value!.toBigInt();
  }

  set createdTimeStamp(value: BigInt) {
    this.set("createdTimeStamp", Value.fromBigInt(value));
  }

  get closedTimeStamp(): BigInt | null {
    let value = this.get("closedTimeStamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closedTimeStamp(value: BigInt | null) {
    if (!value) {
      this.unset("closedTimeStamp");
    } else {
      this.set("closedTimeStamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenA(): Bytes {
    let value = this.get("tokenA");
    return value!.toBytes();
  }

  set tokenA(value: Bytes) {
    this.set("tokenA", Value.fromBytes(value));
  }

  get tokenB(): Bytes {
    let value = this.get("tokenB");
    return value!.toBytes();
  }

  set tokenB(value: Bytes) {
    this.set("tokenB", Value.fromBytes(value));
  }

  get amountA(): BigInt {
    let value = this.get("amountA");
    return value!.toBigInt();
  }

  set amountA(value: BigInt) {
    this.set("amountA", Value.fromBigInt(value));
  }

  get amountB(): BigInt {
    let value = this.get("amountB");
    return value!.toBigInt();
  }

  set amountB(value: BigInt) {
    this.set("amountB", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Token must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Token | null {
    return changetype<Token | null>(store.get("Token", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}
